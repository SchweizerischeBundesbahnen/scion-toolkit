@use 'sass:string';
@use 'sass:map';

/**
 * Applies the given theme. The colors of the theme are set as CSS variables on the root element according to the following scheme:
 *
 * ## PRIMARY palette colors:
 * --sci-color-P<hue>
 * --sci-color-primary // default color
 * --sci-color-primary-rgb // default color as RGB value, i.e., can be used, for example, to set the opacity level: rgba(var(--sci-color-primary-rgb), .5)
 * --sci-color-primary-lighter // lighter variant of the default color
 * --sci-color-primary-darker // darker variant of the default color
 *
 * ## ACCENT palette colors:
 * --sci-color-A<hue>
 * --sci-color-accent // default color
 * --sci-color-accent-rgb // default color as RGB value, i.e., can be used, for example, to set the opacity level: rgba(var(--sci-color-accent-rgb), .5)
 * --sci-color-accent-lighter // lighter variant of the default color
 * --sci-color-accent-darker // darker variant of the default color
 *
 * ## WARN palette colors:
 * --sci-color-W<hue>
 * --sci-color-warn // default color
 * --sci-color-warn-rgb // default color as RGB value, i.e., can be used, for example, to set the opacity level: rgba(var(--sci-color-warn-rgb), .5)
 * --sci-color-warn-lighter // lighter variant of the default color
 * --sci-color-warn-darker // darker variant of the default color
 */
@mixin apply-theme($theme) {
  :root {
    @each $name, $value in $theme {
      @if type-of($value) == color {
        --sci-color-#{$name}: #{$value}; // e.g. foreground: #000000
      } @else if type-of($value) == map { // color palette
        $palette: $value;
        @each $hue, $color in $palette {
          $color: _sci-color($palette, $hue);
          @if ($hue == default) {
            --sci-color-#{$name}: #{$color};
          } @else if ($hue == lighter or $hue == darker) {
            --sci-color-#{$name}-#{$hue}: #{$color};
          } @else {
            $paletteSymbol: string.to-upper-case(string.slice($name, 1, 1));
            --sci-color-#{$paletteSymbol}#{$hue}: #{$color};
          }

          // CSS variable with the RGB value, i.e., can be used, for example, to set the opacity level: rgba(var(--sci-color-warn-rgb), .5)
          @if ($hue == 900) {
            --sci-color-#{$name}-rgb: #{red($color)}, #{green($color)}, #{blue($color)};
          }
        }
      }
    }
  }
}

/**
 * Makes a deep merge of given maps. Keys in `$map2` will take precedence over keys in `$map1`.
 *
 * See `https://medium.com/@pentzzsolt/a-non-destructive-map-merge-function-for-sass-f91637f87b2e`
 */
@function map-deep-merge($map1, $map2) {
  $result: $map1;
  @each $key, $value in $map2 {
    @if (not map-has-key($result, $key)) or (type-of(map.get($result, $key)) != type-of($value)) or (not (type-of(map.get($result, $key)) == map and type-of($value) == map)) {
      $result: map.merge($result, ($key: $value));
    } @else {
      $result: map.merge($result, ($key: map-deep-merge(map.get($result, $key), $value)));
    }
  }
  @return $result;
}

/**
 * Gets a color from a color palette.
 *
 * The hue can be one of the standard values (100, 200, etc.) or one of the three preconfigured hues (default, lighter, darker).
 *
 * ---
 * This is a copy of Angular Material Design `mat-color` function in `_theming.scss`.
 *
 * @param $palette The color palette.
 * @param $hue The hue from the palette to use. It can be one of the standard values (100, 200, etc.) or one of the three preconfigured hues (default, lighter, darker).
          If this is a value between 0 and 1, it will be treated as opacity of the default color in that palette.
 * @param $opacity The alpha channel value for the color.
 */
@function _sci-color($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an opacity value, so recall this function with the default hue and that given opacity.
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return _sci-color($palette, default, $hue);
  }

  $color: map.get($palette, $hue);

  // If hueKey references another color key, e.g. for default, lighter or darker.
  @if type-of($color) == number {
    $color: _sci-color($palette, $color);
  }
  $opacity: if($opacity == null, opacity($color), $opacity);

  @return rgba($color, $opacity);
}