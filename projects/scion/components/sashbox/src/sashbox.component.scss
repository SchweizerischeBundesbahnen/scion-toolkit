:host {
  // CSS variables to override properties of the theme (public API).
  --ɵsci-sashbox-gap: var(--sci-sashbox-gap, 10px); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-background-color: var(--sci-sashbox-splitter-background-color, var(--sci-sashbox-splitter-bgcolor, #d2d2d2)); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-background-color-hover: var(--sci-sashbox-splitter-background-color-hover, var(--sci-sashbox-splitter-bgcolor_hover, var(--ɵsci-sashbox-splitter-background-color))); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-size: var(--sci-sashbox-splitter-size, 1px); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-size-hover: var(--sci-sashbox-splitter-size-hover, var(--sci-sashbox-splitter-size_hover, 8px)); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-touch-target-size: var(--sci-sashbox-splitter-touch-target-size, 15px); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-cross-axis-size: var(--sci-sashbox-splitter-cross-axis-size, 100%); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-border-radius: var(--sci-sashbox-splitter-border-radius, 0); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-opacity-active: var(--sci-sashbox-splitter-opacity-active, var(--sci-sashbox-splitter-opacity_active, 1)); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead
  --ɵsci-sashbox-splitter-opacity-hover: var(--sci-sashbox-splitter-opacity-hover, var(--sci-sashbox-splitter-opacity_hover, .3)); // TODO [Angular 17] Remove fallback and inform about breaking change to import @scion/components SCSS module instead

  display: flex;
  align-items: stretch;
  box-sizing: border-box;
  overflow: hidden;

  /*
   * In the sashbox component (:host), we form a new stacking context to make nested stacking contexts local,
   * preventing nested stacking contexts from leaking the sashbox element boundary.
   *
   * We use `0` as its z-index value. A z-index of `0` is like setting no z-index (auto) at all, except that it
   * still forms a stacking context. Since it has the order `0`, it will not overlap subsequent positioned elements
   * of the same parent stacking context.
   *
   * Rationale for setting a z-index on the splitter:
   * The splitter is a positioned element; thus, it implicitly forms a stacking context that overlaps the subsequent
   * sash (as long as it is statically positioned). But sash content may also contain positioned elements. To prevent
     them from overlapping the splitter, we form a stacking context on the splitter by setting its z-index to `1`.
   *
   * Refer to https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
   * to learn more about stacking contexts.
   */
  z-index: 0;

  * {
    box-sizing: border-box;
  }

  &.column {
    flex-direction: column;
  }

  &.row {
    flex-direction: row;
  }

  > div.sash {
    overflow: hidden;
    display: grid; // stretch the sash content
    grid-auto-rows: 100%;
    grid-auto-columns: 100%;

    // flex properties are set programmatically.
  }

  &.row > div.sash {
    margin: 0 var(--ɵsci-sashbox-gap);

    &.first {
      margin-left: 0;
    }

    &.last {
      margin-right: 0;
    }
  }

  &.column > div.sash {
    margin: var(--ɵsci-sashbox-gap) 0;

    &.first {
      margin-top: 0;
    }

    &.last {
      margin-bottom: 0;
    }
  }

  &.sashing > div.sash {
    pointer-events: none; // e.g. iframes would swallow pointer events
  }

  > sci-splitter {
    --sci-splitter-background-color: var(--ɵsci-sashbox-splitter-background-color);
    --sci-splitter-background-color-hover: var(--ɵsci-sashbox-splitter-background-color-hover);
    --sci-splitter-size: var(--ɵsci-sashbox-splitter-size);
    --sci-splitter-size-hover: var(--ɵsci-sashbox-splitter-size-hover);
    --sci-splitter-touch-target-size: var(--ɵsci-sashbox-splitter-touch-target-size);
    --sci-splitter-cross-axis-size: var(--ɵsci-sashbox-splitter-cross-axis-size);
    --sci-splitter-border-radius: var(--ɵsci-sashbox-splitter-border-radius);
    --sci-splitter-opacity-active: var(--ɵsci-sashbox-splitter-opacity-active);
    --sci-splitter-opacity-hover: var(--ɵsci-sashbox-splitter-opacity-hover);

    flex: none;
    z-index: 1; // see the explanation above why we set this z-index
  }
}
